(function() {
    const t = window;
    const e = document.documentElement;

    // Remove no-js class and add js class for better JS detection
    e.classList.remove("no-js");
    e.classList.add("js");

    // Initialize ScrollReveal for animations if the body has animations class
    if (document.body.classList.contains("has-animations")) {
        const sr = ScrollReveal();
        sr.reveal(".hero-title, .hero-paragraph, .hero-form", {
            duration: 1000,
            distance: "40px",
            easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
            origin: "bottom",
            interval: 150
        });
    }

    const movingObjects = document.querySelectorAll(".is-moving-object");
    let mouseX = 0, mouseY = 0, scrollY = 0;
    const clientWidth = e.clientWidth;
    const clientHeight = e.clientHeight;

    if (movingObjects.length > 0) {
        t.addEventListener("mousemove", throttle((event) => {
            mouseX = event.pageX;
            mouseY = event.pageY;
            updateMovingObjects(movingObjects);
        }, 150));
    }

    function throttle(callback, delay) {
        let lastCall = 0;
        return function(...args) {
            const now = Date.now();
            if (now - lastCall >= delay) {
                lastCall = now;
                callback(...args);
            }
        };
    }

    function updateMovingObjects(objects) {
        for (let i = 0; i < objects.length; i++) {
            const object = objects[i];
            const translatingFactor = object.getAttribute("data-translating-factor") || 20;
            const rotatingFactor = object.getAttribute("data-rotating-factor") || 20;
            const perspective = object.getAttribute("data-perspective") || 500;

            let transformStyles = [];

            const translateX = (clientWidth / 2 - mouseX) / translatingFactor;
            const translateY = (clientHeight / 2 - (mouseY - scrollY)) / translatingFactor;

            // Applying translation
            if (object.classList.contains("is-translating")) {
                transformStyles.push(`translate(${translateX}px, ${translateY}px)`);
            }
            // Applying rotation
            if (object.classList.contains("is-rotating")) {
                transformStyles.push(`perspective(${perspective}px) rotateY(${-(translateX / rotatingFactor)}deg) rotateX(${translateY / rotatingFactor}deg)`);
            }

            // Apply transformations if any
            if (transformStyles.length > 0) {
                object.style.transform = transformStyles.join(" ");
                object.style.transition = "transform 1s ease-out";
                object.style.transformStyle = "preserve-3d";
                object.style.backfaceVisibility = "hidden";
            }
        }
    }
})();
